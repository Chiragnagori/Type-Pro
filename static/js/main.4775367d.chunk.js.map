{"version":3,"sources":["Preview.js","Speed.js","App.js","getText.js","serviceWorker.js","index.js"],"names":["Preview","props","text","split","react_default","a","createElement","className","map","s","i","color","userInput","length","key","style","backgroundColor","Speed","symbols","sec","wpm","Math","round","initialState","texts","floor","random","getText","started","finished","App","state","onRestart","_this","setState","onUserInputChange","e","v","target","value","setTimer","onFinish","countCorrectSymbols","this","clearInterval","interval","replace","filter","_this2","setInterval","prevProps","onChange","placeholder","readOnly","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAEeA,EAAA,SAACC,GAEd,IAAMC,EAAOD,EAAMC,KAAKC,MAAM,IAE9B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAEXL,EAAKM,IAAI,SAACC,EAAEC,GACV,IAAIC,EAIJ,OAHID,EAAIT,EAAMW,UAAUC,SACtBF,EAAQF,IAAMR,EAAMW,UAAUF,GAAK,UAAY,WAE1CN,EAAAC,EAAAC,cAAA,QAAMQ,IAAKJ,EAAGK,MAAO,CAACC,gBAAiBL,IAASF,OCZlDQ,EAAA,SAAChB,GAEd,GAAsB,IAAlBA,EAAMiB,SAA+B,IAAdjB,EAAMkB,IAAW,CAC1C,IAAMC,EAAOnB,EAAMiB,QAAQ,GAAMjB,EAAMkB,IAAI,IAC3C,OACEf,EAAAC,EAAAC,cAAA,WAAMe,KAAKC,MAAMF,GAAjB,QAIJ,OAAO,MCNHG,EAAe,CACnBrB,KCNa,WAEb,IAAMsB,EAAQ,CACZ,wiBAQA,iTAKA,igBAQF,OAAOA,EAAMH,KAAKI,MAAMJ,KAAKK,SAASF,EAAMX,SDlBtCc,GACNf,UAAW,GACXM,QAAS,EACTC,IAAK,EACLS,SAAS,EACTC,UAAU,GAsEGC,6MAjEbC,MAAQR,IAERS,UAAY,WACVC,EAAKC,SAASX,MAGhBY,kBAAoB,SAACC,GACnB,IAAMC,EAAID,EAAEE,OAAOC,MACnBN,EAAKO,WACLP,EAAKQ,SAASJ,GACdJ,EAAKC,SAAS,CACZtB,UAAWyB,EACXnB,QAASe,EAAKS,oBAAoBL,8EAI7BzB,GACHA,IAAc+B,KAAKZ,MAAM7B,OAC3B0C,cAAcD,KAAKE,UACnBF,KAAKT,SAAS,CACZL,UAAU,iDAKIjB,GAClB,IAAMV,EAAOyC,KAAKZ,MAAM7B,KAAK4C,QAAQ,IAAK,IAC1C,OAAOlC,EAAUkC,QAAQ,IAAK,IAAI3C,MAAM,IAAI4C,OAAO,SAACtC,EAAEC,GAAH,OAASD,IAAMP,EAAKQ,KAAIG,0CAGlE,IAAAmC,EAAAL,KACJA,KAAKZ,MAAMH,UACde,KAAKT,SAAS,CAACN,SAAS,IACxBe,KAAKE,SAAWI,YAAY,WAC1BD,EAAKd,SAAS,SAAAgB,GACZ,MAAO,CAAC/B,IAAK+B,EAAU/B,IAAM,MAE9B,uCAKL,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAACN,EAAD,CAASE,KAAMyC,KAAKZ,MAAM7B,KAAMU,UAAW+B,KAAKZ,MAAMnB,YACtDR,EAAAC,EAAAC,cAAA,YACEiC,MAAOI,KAAKZ,MAAMnB,UAClBuC,SAAUR,KAAKR,kBACf5B,UAAU,oBACV6C,YAAY,kBACZC,SAAUV,KAAKZ,MAAMF,WAEvBzB,EAAAC,EAAAC,cAACW,EAAD,CAAOE,IAAKwB,KAAKZ,MAAMZ,IAAKD,QAASyB,KAAKZ,MAAMb,UAChDd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAe+C,QAASX,KAAKX,WAA/C,sBA1DIuB,aEFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4775367d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n  const text = props.text.split('');\r\n\r\n  return (\r\n    <div className=\"border rounded p-3 mb-4\">\r\n      {\r\n        text.map((s,i) => {\r\n          let color;\r\n          if (i < props.userInput.length) {\r\n            color = s === props.userInput[i] ? '#77D970' : '#fcbea4';\r\n          }\r\n          return <span key={i} style={{backgroundColor: color}}>{s}</span>\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n  if (props.symbols !== 0 && props.sec !== 0) {\r\n    const wpm = (props.symbols/5) / (props.sec/60);\r\n    return (\r\n      <div>{Math.round(wpm)} wpm</div>\r\n    )\r\n  }\r\n  \r\n  return null;\r\n}","import React, { Component } from 'react';\r\nimport Preview from './Preview';\r\nimport Speed from './Speed';\r\nimport getText from './getText';\r\n\r\nconst initialState = {\r\n  text: getText(),\r\n  userInput: '',\r\n  symbols: 0,\r\n  sec: 0,\r\n  started: false,\r\n  finished: false\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  state = initialState;\r\n\r\n  onRestart = () => {\r\n    this.setState(initialState)\r\n  }\r\n\r\n  onUserInputChange = (e) => {\r\n    const v = e.target.value;\r\n    this.setTimer();\r\n    this.onFinish(v)\r\n    this.setState({\r\n      userInput: v,\r\n      symbols: this.countCorrectSymbols(v)\r\n    })\r\n  }\r\n\r\n  onFinish(userInput) {\r\n    if (userInput === this.state.text) {\r\n      clearInterval(this.interval);\r\n      this.setState({\r\n        finished: true\r\n      })\r\n    }\r\n  }\r\n\r\n  countCorrectSymbols(userInput) {\r\n    const text = this.state.text.replace(' ', '');\r\n    return userInput.replace(' ', '').split('').filter((s,i) => s === text[i]).length;\r\n  }\r\n\r\n  setTimer() {\r\n    if (!this.state.started) {\r\n      this.setState({started: true});\r\n      this.interval = setInterval(() => {\r\n        this.setState(prevProps => {\r\n          return {sec: prevProps.sec + 1}\r\n        })\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container mt-5 mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 text-light\">\r\n            <Preview text={this.state.text} userInput={this.state.userInput}/>\r\n            <textarea\r\n              value={this.state.userInput}\r\n              onChange={this.onUserInputChange}\r\n              className=\"form-control mb-3\"\r\n              placeholder=\"Start typing...\"\r\n              readOnly={this.state.finished}\r\n            ></textarea>\r\n            <Speed sec={this.state.sec} symbols={this.state.symbols}/>\r\n            <div className=\"text-right\">\r\n              <button className=\"btn btn-dark\" onClick={this.onRestart}>Restart</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export default () => {\r\n\r\n  const texts = [\r\n    \"Here's to the crazy ones. The misfits. The rebels. The troublemakers.\"\r\n    + \" The round pegs in the square holes. The ones who see things differently.\"\r\n    + \" They're not fond of rules. And they have no respect for the status quo.\"\r\n    + \" You can quote them, disagree with them, glorify or vilify them. About the only thing\"\r\n    + \" you can't do is ignore them. Because they change things. They push the human race forward. And\"\r\n    + \" while some may see them as the crazy ones, we see genius. Because the people who are crazy\"\r\n    + \" enough to think they can change the world, are the ones who do.\",\r\n\r\n    \"I believe that everything happens for a reason. People change so that you can learn to let go,\"\r\n    + \" things go wrong so that you appreciate them when they're right, you believe lies so you eventually\"\r\n    + \" learn to trust no one but yourself, and sometimes\"\r\n    + \" good things fall apart so better things can fall together.\",\r\n\r\n    \"To love at all is to be vulnerable. Love anything and your heart will be wrung and possibly broken. If\"\r\n    + \" you want to make sure of keeping it intact you must give it to no one, not even an animal.\"\r\n    + \" Wrap it carefully round with hobbies and little luxuries; avoid all entanglements. Lock it up safe\"\r\n    + \" in the casket or coffin of your selfishness. But in that casket, safe, dark, motionless, airless\"\r\n    + \" will change. It will not be broken; it will become unbreakable, impenetrable, irredeemable.\"\r\n    + \" To love is to be vulnerable\"\r\n  ];\r\n  \r\n  return texts[Math.floor(Math.random()*texts.length)];\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}